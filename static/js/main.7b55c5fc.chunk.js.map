{"version":3,"sources":["logo.svg","Home.js","Add.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Home","_ref","directory","changeroute","delinfo","react_default","a","createElement","class","onClick","map","element","i","id","key","contactname","contactnumber","loadname","e","document","querySelector","innerHTML","target","value","loadnumber","Add","enterinfo","htmlFor","type","name","onInput","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","route","setState","newstate","state","push","console","log","index","newdir","filter","src_Home","src_Add","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7b55c5fc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\n\r\nfunction Home({directory, changeroute, delinfo}){\r\n    return(\r\n        <div>\r\n            <h1>Phone Directory</h1>\r\n            <div class=\"button-container\">\r\n            <button class=\"addpage\" onClick={()=>{changeroute('/add')}}>Add</button>\r\n            </div>\r\n            <table>\r\n            <tbody>\r\n            {directory.map((element,i) => {\r\n                return (\r\n                    <tr id={i} key={i}>\r\n                        <td>{element.contactname}</td>\r\n                        <td>{element.contactnumber}</td>\r\n                        <td><button class=\"delbutton\" onClick={()=>delinfo(i)}>Delete</button></td>\r\n                    </tr>\r\n                );\r\n            })}\r\n            </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nfunction loadname(e){\r\n   document.querySelector('#showname').innerHTML = e.target.value;\r\n}\r\n\r\nfunction loadnumber(e){\r\n    document.querySelector('#shownumber').innerHTML = e.target.value;\r\n }\r\n\r\n \r\nfunction Add({enterinfo, changeroute}){\r\n    return(\r\n        <div>\r\n            <h1>Phone Directory</h1>\r\n            <div class=\"card\">\r\n                <h3>Add Contact Information</h3>\r\n                <label htmlFor=\"Name\">Enter Name:</label><br/>\r\n                <input type=\"text\" name=\"Name\" id=\"Name\" onInput={loadname}/><span id = \"showname\"></span><br/><br/>\r\n                <label htmlFor=\"cellphone\" >Enter number:</label><br/>\r\n                <input type=\"text\" name=\"cellphone\" id=\"cellphone\" onInput={loadnumber}/><span id = \"shownumber\"></span><br/><br/>\r\n                <button class=\"addinfo\" onClick={()=>{\r\n                            enterinfo(document.querySelector('#Name').value, document.querySelector('#cellphone').value)\r\n                        }}>\r\n                   Save\r\n                </button>\r\n            </div>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default Add;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './Home.js';\nimport Add from './Add.js';\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.state={\n      route: '/',\n      directory: []\n    }\n  }\n\n  changeroute = (route)=>{\n    this.setState({route});\n  }\n  \n  enterinfo = (contactname, contactnumber )=>{\n      if(contactname&&contactnumber){\n        const newstate = this.state;\n        newstate.directory.push({contactname, contactnumber});\n        this.setState({directory: newstate.directory, route:'/add'});\n        console.log(this.state.directory);\n        this.changeroute('/');\n      }\n  }\n\n  delinfo = index=>{\n    let newdir = this.state.directory;\n    newdir = newdir.filter((element, i)=>index!=i);\n    this.setState({directory: newdir, route:'/'});\n  }\n\n    render() {\n      if(this.state.route==='/'){\n        return (\n          <Home directory = {this.state.directory} changeroute = {this.changeroute} delinfo={this.delinfo}/>\n        );\n      }else{\n        return(\n          <Add enterinfo = {this.enterinfo}  />\n        );\n      }\n    }\n  \n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}